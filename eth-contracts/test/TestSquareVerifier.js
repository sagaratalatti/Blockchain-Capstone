// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');
var truffleAssert = require('truffle-assertions');
var proof = require('./proof.json');

contract('SquareVerifier', accounts => {
    describe('Testing zokrates proof',  async () => {
        beforeEach(async function () {
            this.contract = await SquareVerifier.new();
        });
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('zokrates proof verified', async function () {
            let result = await this.contract.verifyTx(
                proof.proof.A, //1
                proof.proof.A_p, //2
                proof.proof.B, //3
                proof.proof.B_p, //4
                proof.proof.C, //5
                proof.proof.C_p, //6
                proof.proof.H, //7
                proof.proof.K, //8
                proof.input, //9
            )
            truffleAssert.eventEmitted(result, 'Verified', (event) => {
                return event['0'] === 'Transaction successfully verified.';
            })
        })

        // Test verification with incorrect proof
        it('zokrates proof unverified', async function () {
            let result = await this.contract.verifyTx(
                proof.proof.A,
                proof.proof.A_p,
                proof.proof.B,
                proof.proof.B_p,
                proof.proof.C,
                proof.proof.C_p,
                proof.proof.H,
                proof.proof.K,
                [7,1],
            )
            assert.equal(result.logs.length, 0, "Transaction verification should fail");
        })
    })
})


    

